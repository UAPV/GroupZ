<?php



/**
 * Skeleton subclass for representing a row from the 'gz_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.4 on:
 *
 * Thu Sep 23 21:16:36 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class User extends BaseUser {

  public function __toString()
  {
    return $this->getFullname();
  }

  public function getFullname()
  {
    return $this->getFirstname().' '.$this->getLastname();
  }

  /**
   * Set the value of [mail] column.
   *
   * @param      string $v new value
   * @return     User The current object (for fluent API support)
   */
  public function setEmail($v)
  {
    parent::setEmail(strtolower($v));
  }

  /**
   * Alias of User::getIsGuest()
   *
   * @return boolean
   */
  public function isGuest ()
  {
    return $this->getIsGuest();
  }

  /**
   * Is the user trusted ?
   * 
   * @return boolean
   */
  public function isTrusted ()
  {
    return ! $this->getIsGuest();
  }

  /**
   * Return the list of groups the user is member of but not the creator.
   *
   * @return PropelObjectCollection
   */
  public function getFollowedGroups ()
  {
    return $this->getGroups(); // TODO need to be changed if we include the user in the group members (implicit now)
  }

  /**
   * Tell if the user has an invitation pending for the group $group.
   *
   * @param Group $group
   * @return boolean
   */
  public function hasInvitationForGroup (Group $group)
  {
    return (InvitationQuery::create ()
      ->filterByGroup($group)
      ->filterByUser($this)
      ->count () > 0);
  }

  /**
   * Get the saved salt or generate a new one.
   *
   * @return string
   */
  public function getSalt ()
  {
    $salt = parent::getSalt ();

    if ($salt == '')
    {
      $salt = sha1 ($this->getEmail ().time ().mt_rand ());
      $this->setSalt ($salt);
    }

    return $salt;
  }

  /**
   * @return string
   */
  public function hashPassword ($password)
  {
    return sha1 ($this->getSalt ().$password);
  }

  /**
   * Hash the password before storing it
   *
   * @param  $password
   * @return void
   */
  public function setPassword ($password)
  {
    parent::setPassword ($this->hashPassword ($password));
  }


} // User
