<?php



/**
 * Skeleton subclass for representing a row from the 'gz_group' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.4 on:
 *
 * Thu Sep 23 21:16:36 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class Group extends BaseGroup {

  public function __toString()
  {
    return $this->getTitle();
  }

  public function getEmail ()
  {
    return $this->getName().'@groupes.univ-avignon.fr'; // TODO
  }

  /**
   * Create an invitation an send it.
   *
   * @param User $user
   * @return Invitation
   */
  public function inviteUser (User $user)
  {
    return InvitationPeer::createInvitation ($this, $user);
  }

  public function getAllMembers ()
  {
    if ($this->isNew ())
      return array ();

    return UserQuery::create ()
      ->orderByName ()
      ->filterByGroupAndInvitations($this)
      ->find ();
  }

  /**
   * @return boolean
   */
  public function hasPendingInvitations ()
  {
    return (InvitationQuery::create ()
      ->filterByGroup($this)
      ->count() > 0);
  }

  /**
   * Code to be run before inserting to database to notify the dispatcher
   * @param PropelPDO $con
   */
  public function doSave(PropelPDO $con = null)
  {
    if ($this->isNew())
    {
      // Create the mailing list
      $event = new sfEvent ($this, 'gz_group.create');
      sfContext::getInstance()->getEventDispatcher()->notify($event);
    }

    parent::doSave ($con);
  }

  /**
   * Code to be run before deleting from database to notify the dispatcher
   * @param PropelPDO $con
   */
  public function postDelete(PropelPDO $con = null)
  {
    // Delete the mailing list
    $event = new sfEvent ($this, 'gz_group.delete');
    sfContext::getInstance()->getEventDispatcher()->notify($event);

    return parent::preInsert ($con);
  }

} // Group
